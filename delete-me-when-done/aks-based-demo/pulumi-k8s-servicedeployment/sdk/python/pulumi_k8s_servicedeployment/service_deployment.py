# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ServiceDeploymentArgs', 'ServiceDeployment']

@pulumi.input_type
class ServiceDeploymentArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 ports: pulumi.Input[Sequence[pulumi.Input[float]]],
                 namespace: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[float]] = None,
                 service_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceDeployment resource.
        :param pulumi.Input[str] image: Name of the image to deploy.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] ports: Ports for service to listen on.
        :param pulumi.Input[str] namespace: Namespace in which to push the deployment and service.
        :param pulumi.Input[float] replicas: Number of replicas of the service to deploy.
        :param pulumi.Input[str] service_type: Service Type for K8s service. E.g. "LoadBalancer" or "ClusterIP"
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "ports", ports)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        Name of the image to deploy.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        """
        Ports for service to listen on.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace in which to push the deployment and service.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[float]]:
        """
        Number of replicas of the service to deploy.
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Service Type for K8s service. E.g. "LoadBalancer" or "ClusterIP"
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


class ServiceDeployment(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 replicas: Optional[pulumi.Input[float]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ServiceDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] image: Name of the image to deploy.
        :param pulumi.Input[str] namespace: Namespace in which to push the deployment and service.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] ports: Ports for service to listen on.
        :param pulumi.Input[float] replicas: Number of replicas of the service to deploy.
        :param pulumi.Input[str] service_type: Service Type for K8s service. E.g. "LoadBalancer" or "ClusterIP"
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ServiceDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 image: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 replicas: Optional[pulumi.Input[float]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceDeploymentArgs.__new__(ServiceDeploymentArgs)

            if image is None and not opts.urn:
                raise TypeError("Missing required property 'image'")
            __props__.__dict__["image"] = image
            __props__.__dict__["namespace"] = namespace
            if ports is None and not opts.urn:
                raise TypeError("Missing required property 'ports'")
            __props__.__dict__["ports"] = ports
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["service_type"] = service_type
            __props__.__dict__["front_end_ip"] = None
        super(ServiceDeployment, __self__).__init__(
            'k8s-servicedeployment:index:ServiceDeployment',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="frontEndIp")
    def front_end_ip(self) -> pulumi.Output[str]:
        """
        The front end IP
        """
        return pulumi.get(self, "front_end_ip")

