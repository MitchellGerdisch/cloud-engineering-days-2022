// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.K8sServiceDeployment
{
    [K8sServiceDeploymentResourceType("k8s-servicedeployment:index:ServiceDeployment")]
    public partial class ServiceDeployment : Pulumi.ComponentResource
    {
        /// <summary>
        /// The front end IP
        /// </summary>
        [Output("frontEndIp")]
        public Output<string> FrontEndIp { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceDeployment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceDeployment(string name, ServiceDeploymentArgs args, ComponentResourceOptions? options = null)
            : base("k8s-servicedeployment:index:ServiceDeployment", name, args ?? new ServiceDeploymentArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ServiceDeploymentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the image to deploy.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Namespace in which to push the deployment and service.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("ports", required: true)]
        private InputList<double>? _ports;

        /// <summary>
        /// Ports for service to listen on.
        /// </summary>
        public InputList<double> Ports
        {
            get => _ports ?? (_ports = new InputList<double>());
            set => _ports = value;
        }

        /// <summary>
        /// Number of replicas of the service to deploy.
        /// </summary>
        [Input("replicas")]
        public Input<double>? Replicas { get; set; }

        /// <summary>
        /// Service Type for K8s service. E.g. "LoadBalancer" or "ClusterIP"
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        public ServiceDeploymentArgs()
        {
        }
    }
}
